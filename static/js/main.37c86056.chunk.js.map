{"version":3,"sources":["core/game.js","components/Square.jsx","components/Board.jsx","components/Game.jsx","core/evaluation.js","core/agent.js","App.js","reportWebVitals.js","index.js"],"names":["X","O","EMPTY","initGame","turn","winner","gameover","board","move","game","location","getValidMoves","includes","nextState","checkWinner","checkGameover","validMoves","i","length","push","lines","a","b","c","every","it","boardToString","join","calculateReward","player","Square","value","clickable","evaluateScore","highlight","onClick","classes","className","classnames","style","position","height","left","bottom","fontSize","lineHeight","fontWeight","Number","toFixed","Board","pad","evaluateBoard","map","range","bestAction","f","chunk","take","row","cell","j","Game","onMove","border","padding","gutter","PLAYLAST","RandomAgent","policy","A","newEpisode","observe","learn","this","MorteCarloAgent","epsilon","discount","boardString","cloned","clone","Q","pulled","pullAt","bestScore","max","indexOf","sample","memory","episode","record","state","action","G","stateString","returnSums","returnCounts","Proxy","get","target","name","SarsaAgent","alpha","record1","record2","nextAction","reward","nextStateString","nextStateValue","tdDelta","_Q","QLearningAgent","Option","Select","player1Agents","title","agent","player2Agents","App","useState","setGame","setEpisode","evaluateEpisode","setEvaluateEpisode","isTraining","setIsTraining","trainingResults","setTraningResults","evaluateResults","setEvaluateResults","playmode","player1","setPlayer1","player2","setPlayer2","setEvaluateBoard","setBestAction","useEffect","currentPlayer","probs","maxProb","index","prob","select","filter","console","log","training","result","againstAgent","playType","episodes","draw","total","opponent","train","evaluateAgent","results","evaluate","evaluateMove","score","justify","align","width","md","defaultValue","minWidth","onChange","find","ix","size","checked","e","disabled","marginTop","type","columns","dataIndex","key","dataSource","pagination","pageSize","hideOnSinglePage","showLessItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c86056.chunk.js","sourcesContent":["import { every } from 'lodash';\n\nexport const X = 'X';\nexport const O = 'O';\nexport const EMPTY = '-';\n\n\nexport const initGame = () => {\n  return {\n    turn: X,\n    winner: null,\n    gameover: false,\n    board: [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]\n  }\n}\n\n\nexport const move = (game, location) => {\n  let { turn, board } = game;\n\n  const validMoves = getValidMoves(board);\n  if (!validMoves.includes(location)) {\n    return game;\n  }\n\n  let nextState = [...board];\n  nextState[location] = turn;\n  turn = turn === X ? O : X;\n\n  const winner = checkWinner(nextState);\n  const gameover = checkGameover(nextState);\n\n  return {\n    turn,\n    winner,\n    gameover,\n    board: nextState\n  }\n}\n\nexport const getValidMoves = (board) => {\n  let validMoves = [];\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === EMPTY) validMoves.push(i);\n  }\n  return validMoves;\n}\n\nexport const checkWinner = (board) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (board[a] !== EMPTY && board[a] === board[b] && board[a] === board[c]) {\n      return board[a];\n    }\n  }\n  return null;\n}\n\nexport const checkGameover = (board) => {\n  return every(board, it => it !== EMPTY) || !!checkWinner(board);\n}\n\nexport const boardToString = (board) => {\n  return board.join('')\n}\n\nexport const calculateReward = (game, player) => {\n  const { gameover, winner } = game;\n  if (!gameover) {\n    return 0;\n  } else {\n    if (!winner) {\n      // Reward for a draw game\n      return 0;\n    } else if (winner === player) {\n      // Reward for win\n      return 10;\n    } else {\n      // Reward for lose\n      return -10;\n    }\n  }\n}\n","import React from 'react'\n\nimport classnames from 'classnames';\n\nimport { EMPTY } from '../core/game';\nimport './Square.css'\n\n\nconst Square = ({ value, clickable, evaluateScore, highlight, onClick = () => { } }) => {\n  let classes = ['square'];\n  clickable ? classes.push('clickable') : classes.push('unclickable');\n  highlight && classes.push('highlight');\n\n  return (\n    <button\n      className={classnames(classes)}\n      onClick={() => {\n        if (clickable) {\n          onClick();\n        }\n      }}\n    >\n      <div style={{ position: \"relative\", height: \"100%\" }}>\n        <span>{value !== EMPTY ? value : ' '}</span>\n        {(evaluateScore !== null && value === EMPTY) ? (\n          <span style={{\n            position: \"absolute\",\n            left: \"6px\", \n            bottom: \"2px\", \n            fontSize: \"10px\", \n            lineHeight: \"10px\", \n            fontWeight: \"bold\"\n          }}>\n            {Number(evaluateScore).toFixed(4)}\n          </span>\n        ) : ''}\n      </div>\n    </button>\n  )\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\nimport { pad, chunk, map, take, range } from 'lodash';\n\nimport './Board.css'\n\nconst Board = ({\n  value = pad('', 9, ' '),\n  validMoves = [],\n  evaluateBoard = map(range(0, 9), () => null),\n  bestAction = null,\n  onClick = f => f\n}) => {\n  return (\n    <div className=\"board\">\n      {map(chunk(take(value, 9), 3), (row, i) => (\n        <div className=\"row\">\n          {map(row, (cell, j) => (\n            <Square\n              value={cell}\n              highlight={bestAction == i * 3 + j}\n              evaluateScore={evaluateBoard[i * 3 + j]}\n              clickable={validMoves.includes(i * 3 + j)}\n              onClick={() => onClick(i * 3 + j)} />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Board;\n","import React from 'react';\nimport { Row, Col } from 'antd';\n\nimport Board from './Board';\nimport { boardToString, getValidMoves } from '../core/game';\n\nimport './Game.css';\n\n\nconst Game = ({ turn, winner, gameover, board, evaluateBoard, bestAction, onMove = f => f }) => {\n  const status = `Player: ${turn}`;\n\n  return (\n    <div className=\"game\">\n      <Row>\n        <Col><h1>TICTACTOE</h1></Col>\n      </Row>\n      {!gameover && (<Row>\n        <Col><div className=\"status\">Player: <b style={{border: \"solid 1px\", padding: \"3px\"}}>{turn}</b></div></Col>\n      </Row>)}\n\n      {gameover && (\n        <Row gutter={[16, 16]}>\n          <Col><div className=\"status\">GAMEOVER</div></Col>\n          {winner ? \n            (<Col><div className=\"status\"><b style={{border: \"solid 1px\", padding: \"3px\"}}>{winner}</b> WIN</div></Col>) :\n            (<Col><div className=\"status\">DRAW</div></Col>)\n          }\n        </Row>\n      )}\n\n      <Board\n        value={boardToString(board)}\n        bestAction={bestAction}\n        evaluateBoard={evaluateBoard}\n        validMoves={!gameover ? getValidMoves(board) : []}\n        onClick={(location) => { onMove(location) }}\n      />\n    </div>\n  )\n}\n\nexport default Game;\n","import { max, filter, map, range } from \"lodash\";\nimport { initGame, move, O, X } from \"./game\";\nimport { select } from \"weighted\";\n\nexport const PLAYFIRST = X;\nexport const PLAYLAST = O;\n\nexport const evaluate = ({\n  agent,\n  againstAgent,\n  playType = PLAYLAST,\n  episodes = 1000,\n}) => {\n  const results = { X: 0, draw: 0, O: 0, total: episodes };\n  for (var i = 0; i < episodes; i++) {\n    let state = initGame();\n    agent.newEpisode();\n    againstAgent.newEpisode();\n\n    for (var j = 0; j < 100; j++) {\n      const { turn } = state;\n      let player = null;\n      if (turn === playType) {\n        player = agent;\n      } else {\n        player = againstAgent;\n      }\n      let probs = player.policy(state);\n      let action = !state.gameover ? select(range(probs.length), probs) : -1;\n      if (!state.gameover) {\n        state = move(state, action);\n      }\n    }\n\n    if (state.winner) {\n      results[state.winner] += 1;\n    } else {\n      results.draw += 1;\n    }\n  }\n  return results;\n};\n\nexport const train = ({\n  agent,\n  againstAgent,\n  playType = PLAYLAST,\n  episodes = 1000,\n}) => {\n  const result = { X: 0, O: 0, draw: 0, total: episodes };\n  for (let i = 1; i <= episodes; i++) {\n    let state = initGame();\n    agent.newEpisode();\n    againstAgent.newEpisode();\n\n    for (let j = 0; j <= 100; j++) {\n      const { turn } = state;\n      let player = null;\n      let opponent = null;\n      if (turn === playType) {\n        player = agent;\n        opponent = againstAgent;\n      } else {\n        player = againstAgent;\n        opponent = agent;\n      }\n      let probs = player.policy(state);\n      let action = !state.gameover ? select(range(probs.length), probs) : -1;\n      player.observe(state, action);\n      player.learn();\n\n      if (!state.gameover) {\n        state = move(state, action);\n      } else {\n        opponent.observe(state, -1);\n        opponent.learn();\n        break;\n      }\n    }\n\n    if (state.winner) {\n      result[state.winner] += 1;\n    } else {\n      result.draw += 1;\n    }\n  }\n  return result;\n};\n","import { range, max, sample, pullAt, clone } from \"lodash\";\nimport { getValidMoves, boardToString, calculateReward, O, X } from \"./game\";\n\nexport class RandomAgent {\n  constructor({ player = X }) {\n    this.player = player;\n  }\n\n  policy = (game) => {\n    const { board } = game;\n    const validMoves = getValidMoves(board);\n    let A = range(0, 9, 0.0);\n    for (let i = 0; i < validMoves.length; i++) {\n      const a = validMoves[i];\n      A[a] = 1.0 / validMoves.length;\n    }\n    return A;\n  };\n\n  newEpisode = () => {};\n  observe = () => {};\n  learn = () => {};\n}\n\nexport class MorteCarloAgent {\n  constructor({ epsilon = 0.1, discount = 0.9, player = O }) {\n    this.epsilon = epsilon;\n    this.discount = discount;\n    this.episode = [];\n    this.player = player;\n\n    this.Q = new Proxy(\n      {},\n      {\n        get: (target, name) => {\n          if (!(name in target)) {\n            target[name] = range(0, 9, 0.0);\n          }\n          return target[name];\n        },\n      }\n    );\n\n    this.returnSums = new Proxy(\n      {},\n      {\n        get: (target, name) => {\n          if (!(name in target)) {\n            target[name] = range(0, 9, 0.0);\n          }\n          return target[name];\n        },\n      }\n    );\n\n    this.returnCounts = new Proxy(\n      {},\n      {\n        get: (target, name) => {\n          if (!(name in target)) {\n            target[name] = range(0, 9, 0.0);\n          }\n          return target[name];\n        },\n      }\n    );\n  }\n\n  policy = (game) => {\n    const { board } = game;\n    const validMoves = getValidMoves(board);\n    const boardString = boardToString(board);\n    let A = range(0, 9, 0.0);\n    const cloned = clone(this.Q[boardString]);\n    const pulled = pullAt(cloned, validMoves);\n    const bestScore = max(pulled);\n    const bestAction = validMoves[pulled.indexOf(bestScore)];\n    for (let i = 0; i < validMoves.length; i++) {\n      const a = validMoves[i];\n      A[a] = this.epsilon / validMoves.length;\n    }\n    if (validMoves.includes(bestAction)) {\n      A[bestAction] += 1.0 - this.epsilon;\n    } else {\n      const someAction = sample(validMoves);\n      A[someAction] += 1.0 - this.epsilon;\n    }\n\n    return A;\n  };\n\n  learn = () => {\n    const memory = this.episode;\n\n    if (memory.length > 0 && memory[memory.length - 1][0].gameover) {\n      for (let i = 0; i < memory.length - 1; i++) {\n        const record = memory[i];\n\n        const state = record[0];\n        const action = record[1];\n\n        let G = 0;\n        let discount = this.discount;\n        const stateString = boardToString(state.board);\n\n        for (let j = i + 1; j < memory.length; j++) {\n          const nextRecord = memory[j];\n          const nextState = nextRecord[0];\n          const reward = calculateReward(nextState, this.player);\n          G += reward * discount;\n          discount = discount * this.discount;\n        }\n        this.returnSums[stateString][action] += G;\n        this.returnCounts[stateString][action] += 1.0;\n        this.Q[stateString][action] =\n          this.returnSums[stateString][action] /\n          this.returnCounts[stateString][action];\n        \n      }\n    }\n  };\n\n  observe = (state, action) => {\n    this.episode.push([state, action]);\n  };\n\n  newEpisode = () => {\n    this.episode = [];\n  };\n}\n\nexport class SarsaAgent {\n  constructor({ epsilon = 0.1, discount = 0.9, alpha = 0.01, player = O }) {\n    this.epsilon = epsilon;\n    this.discount = discount;\n    this.alpha = alpha;\n    this.player = player;\n    this.episode = [];\n\n    this._Q = {};\n    this.Q = new Proxy(this._Q, {\n      get: (target, name) => {\n        if (!(name in target)) {\n          target[name] = range(0, 9, 0.0);\n        }\n\n        return target[name];\n      },\n    });\n  }\n\n  policy = (game) => {\n    const { board } = game;\n    const validMoves = getValidMoves(board);\n    const boardString = boardToString(board);\n    let A = range(0, 9, 0.0);\n    const cloned = clone(this.Q[boardString]);\n    const pulled = pullAt(cloned, validMoves);\n    const bestScore = max(pulled);\n    const bestAction = validMoves[pulled.indexOf(bestScore)];\n    for (let i = 0; i < validMoves.length; i++) {\n      const a = validMoves[i];\n      A[a] = this.epsilon / validMoves.length;\n    }\n    if (validMoves.includes(bestAction)) {\n      A[bestAction] += 1.0 - this.epsilon;\n    } else {\n      const someAction = sample(validMoves);\n      A[someAction] += 1.0 - this.epsilon;\n    }\n\n    return A;\n  };\n\n  learn = () => {\n    const memory = this.episode;\n    if (memory.length >= 2) {\n      const record1 = memory[memory.length - 2];\n      const record2 = memory[memory.length - 1];\n      const state = record1[0];\n      const action = record1[1];\n      const nextState = record2[0];\n      const nextAction = record2[1];\n\n      const reward = calculateReward(nextState, this.player);\n      const stateString = boardToString(state.board);\n      const nextStateString = boardToString(nextState.board);\n      const nextStateValue = nextState.gameover\n        ? 0\n        : this.Q[nextStateString][nextAction];\n      const tdTarget = reward + this.discount * nextStateValue;\n      const tdDelta = tdTarget - this.Q[stateString][action];\n      this.Q[stateString][action] += this.alpha * tdDelta;\n    }\n  };\n\n  observe = (state, action) => {\n    this.episode.push([state, action]);\n  };\n\n  newEpisode = () => {\n    this.episode = [];\n  };\n}\n\n\nexport class QLearningAgent {\n  constructor({ epsilon = 0.1, discount = 0.9, alpha = 0.01, player = O }) {\n    this.epsilon = epsilon;\n    this.discount = discount;\n    this.alpha = alpha;\n    this.player = player;\n    this.episode = [];\n\n    this._Q = {};\n    this.Q = new Proxy(this._Q, {\n      get: (target, name) => {\n        if (!(name in target)) {\n          target[name] = range(0, 9, 0.0);\n        }\n\n        return target[name];\n      },\n    });\n  }\n\n  policy = (game) => {\n    const { board } = game;\n    const validMoves = getValidMoves(board);\n    const boardString = boardToString(board);\n    let A = range(0, 9, 0.0);\n    const cloned = clone(this.Q[boardString]);\n    const pulled = pullAt(cloned, validMoves);\n    const bestScore = max(pulled);\n    const bestAction = validMoves[pulled.indexOf(bestScore)];\n    for (let i = 0; i < validMoves.length; i++) {\n      const a = validMoves[i];\n      A[a] = this.epsilon / validMoves.length;\n    }\n    if (validMoves.includes(bestAction)) {\n      A[bestAction] += 1.0 - this.epsilon;\n    } else {\n      const someAction = sample(validMoves);\n      A[someAction] += 1.0 - this.epsilon;\n    }\n\n    return A;\n  };\n\n  learn = () => {\n    const memory = this.episode;\n    if (memory.length >= 2) {\n      const record1 = memory[memory.length - 2];\n      const record2 = memory[memory.length - 1];\n      const state = record1[0];\n      const action = record1[1];\n      const nextState = record2[0];\n      \n      const reward = calculateReward(nextState, this.player);\n      const stateString = boardToString(state.board);\n      const nextStateString = boardToString(nextState.board);\n      const nextStateValue = nextState.gameover\n        ? 0\n        : max(this.Q[nextStateString]);\n      const tdTarget = reward + this.discount * nextStateValue;\n      const tdDelta = tdTarget - this.Q[stateString][action];\n      this.Q[stateString][action] += this.alpha * tdDelta;\n    }\n  };\n\n  observe = (state, action) => {\n    this.episode.push([state, action]);\n  };\n\n  newEpisode = () => {\n    this.episode = [];\n  };\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  InputNumber,\n  Button,\n  Table,\n  Select,\n  Divider,\n  Switch,\n} from \"antd\";\n\nimport Game from \"./components/Game\";\nimport {\n  boardToString,\n  checkGameover,\n  initGame,\n  move,\n  X,\n  O,\n} from \"./core/game\";\nimport { evaluate, train, PLAYLAST, PLAYFIRST } from \"./core/evaluation\";\nimport { RandomAgent, SarsaAgent, MorteCarloAgent, QLearningAgent } from \"./core/agent\";\nimport { select } from \"weighted\";\nimport { range, filter, map, max, find } from \"lodash\";\n\nimport \"./App.css\";\n\nconst { Option } = Select;\n\nconst player1Agents = [\n  { title: \"Random Agent\", agent: new RandomAgent({ player: X }) },\n  { title: \"Monte Carlo Agent\", agent: new MorteCarloAgent({ player: X })},\n  { title: \"Sarsa Agent\", agent: new SarsaAgent({ player: X }) },\n  { title: \"Q-Learning Agent\", agent: new QLearningAgent({ player: X }) },\n];\n\nconst player2Agents = [\n  { title: \"Random Agent\", agent: new RandomAgent({ player: O }) },\n  { title: \"Monte Carlo Agent\", agent: new MorteCarloAgent({ player: O })},\n  { title: \"Sarsa Agent\", agent: new SarsaAgent({ player: O }) },\n  { title: \"Q-Learning Agent\", agent: new QLearningAgent({ player: O }) },\n];\n\nfunction App() {\n  const [game, setGame] = useState(initGame());\n  const [episode, setEpisode] = useState(1000);\n  const [evaluateEpisode, setEvaluateEpisode] = useState(1000);\n\n  const [t, setT] = useState(0);\n  const [isTraining, setIsTraining] = useState(false);\n  const [trainingResults, setTraningResults] = useState([]);\n  const [evaluateResults, setEvaluateResults] = useState([]);\n\n  const [player1, setPlayer1] = useState({\n    agent: player1Agents[0],\n    playmode: false,\n  });\n  const [player2, setPlayer2] = useState({\n    agent: player2Agents[2],\n    playmode: true,\n  });\n\n  const [evaluateBoard, setEvaluateBoard] = useState(\n    map(range(0, 9), () => null)\n  );\n  const [bestAction, setBestAction] = useState(null);\n\n  useEffect(() => {\n    const { turn } = game;\n    let currentPlayer = null;\n    if (turn === X) {\n      currentPlayer = player1;\n    } else {\n      currentPlayer = player2;\n    }\n\n    if (currentPlayer.playmode) {\n      const {\n        agent: { agent },\n      } = currentPlayer;\n      let probs = agent.policy(game);\n      const maxProb = max(probs);\n      probs = map(probs, (it, index) => ({ index, prob: it }));\n      let action = select(filter(probs, (it) => it.prob == maxProb));\n      action = action.index;\n\n      console.log(\"Q\");\n      console.log(agent.Q && agent.Q[boardToString(game.board)]);\n      console.log(\"A\");\n      console.log(probs);\n\n      agent.observe(game, action);\n      agent.learn();\n\n      if (!game.gameover) {\n        const state = move(game, action);\n        setGame(state);\n        setEvaluateBoard(map(range(0, 9), () => null))\n      }\n    }\n  });\n\n  const onMove = (location) => {\n    const state = move(game, location);\n    setGame(state);\n  };\n\n  const training = () => {\n    setIsTraining(true);\n    const result = train({\n      agent: player2.agent.agent,\n      againstAgent: player1.agent.agent,\n      playType: PLAYLAST,\n      episodes: episode,\n    });\n\n    setTraningResults([result, ...trainingResults]);\n\n    setIsTraining(false);\n  };\n\n  const evaluateAgent = () => {\n    const result = evaluate({\n      agent: player2.agent.agent,\n      againstAgent: player1.agent.agent,\n      playType: PLAYLAST,\n      episodes: evaluateEpisode,\n    });\n    setEvaluateResults([result, ...evaluateResults]);\n  };\n\n  const evaluateMove = (agent) => {\n    let score = agent.policy(game);\n    if (agent.Q) {\n      score = agent.Q[boardToString(game.board)];\n    }\n    setEvaluateBoard(score);\n\n    let probs = agent.policy(game);\n    const maxProb = max(probs);\n    probs = map(probs, (it, index) => ({ index, prob: it }));\n    let action = select(filter(probs, (it) => it.prob == maxProb));\n    action = action.index;\n    setBestAction(action);\n  };\n\n  return (\n    <div className=\"App\">\n      <Row justify=\"center\" align=\"stretch\" gutter={[16, 16]}>\n        <Col>\n          <Card style={{ width: 360, height: \"100%\" }} title=\"SETTINGS\">\n            <Row gutter={[16, 16]} align=\"stretch\">\n              <Col md={8}>\n                <div className=\"status\">\n                  Player{\" \"}\n                  <b style={{ border: \"solid 1px\", padding: \"1px\" }}>X</b>\n                </div>\n              </Col>\n              <Col md={16}>\n                <div>\n                  <Select\n                    defaultValue={player1.agent.title}\n                    style={{ minWidth: \"100%\" }}\n                    onChange={(value) =>\n                      setPlayer1({\n                        ...player1,\n                        agent: find(player1Agents, { title: value }),\n                      })\n                    }\n                  >\n                    {map(player1Agents, ({ title }, ix) => (\n                      <Option key={ix} value={title}>\n                        {title}\n                      </Option>\n                    ))}\n                  </Select>\n                </div>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md={8}></Col>\n              <Col md={16}>\n                <Row gutter={[8, 8]} justify=\"space-between\">\n                  <Col>\n                    <Row gutter={8}>\n                      <Col>Auto</Col>\n                      <Col>\n                        <Switch\n                          size=\"small\"\n                          checked={player1.playmode}\n                          onChange={(e) =>\n                            setPlayer1({ ...player1, playmode: e })\n                          }\n                        />\n                      </Col>\n                    </Row>\n                  </Col>\n                  <Col>\n                    <Button\n                      size=\"small\"\n                      disabled={player1.playmode}\n                      onClick={() => evaluateMove(player1.agent.agent)}\n                    >\n                      Evaluate action\n                    </Button>\n                  </Col>\n                </Row>\n                <Row></Row>\n              </Col>\n            </Row>\n\n            <Divider />\n\n            <Row gutter={[16, 16]}>\n              <Col md={8}>\n                <div className=\"status\">\n                  Player{\" \"}\n                  <b style={{ border: \"solid 1px\", padding: \"1px\" }}>O</b>\n                </div>\n              </Col>\n\n              <Col md={16}>\n                <Select\n                  defaultValue={player2.agent.title}\n                  style={{ minWidth: \"100%\" }}\n                  onChange={(value) =>\n                    setPlayer2({\n                      ...player2,\n                      agent: find(player2Agents, { title: value }),\n                    })\n                  }\n                >\n                  {map(player2Agents, ({ title }, ix) => (\n                    <Option key={ix} value={title}>\n                      {title}\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md={8}></Col>\n              <Col md={16}>\n                <Row gutter={[8, 8]} justify=\"space-between\">\n                  <Col>\n                    <Row gutter={8}>\n                      <Col>Auto</Col>\n                      <Col>\n                        <Switch\n                          size=\"small\"\n                          checked={player2.playmode}\n                          onChange={(e) =>\n                            setPlayer2({ ...player2, playmode: e })\n                          }\n                        />\n                      </Col>\n                    </Row>\n                  </Col>\n                  <Col>\n                    <Button size=\"small\" disabled={player2.playmode} onClick={() => evaluateMove(player2.agent.agent)}>\n                      Evaluate action\n                    </Button>\n                  </Col>\n                </Row>\n                <Row></Row>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col>\n          <Card style={{ width: 360 }}>\n            <Row justify=\"center\" align=\"middle\" gutter={[16, 16]}>\n              <Col>\n                <Game {...game} onMove={onMove} evaluateBoard={evaluateBoard} bestAction={bestAction} />\n              </Col>\n            </Row>\n\n            <Row\n              justify=\"center\"\n              align=\"middle\"\n              gutter={[16, 16]}\n              style={{ height: 60 }}\n            >\n              <Col>\n                <div>\n                  <button\n                    onClick={() => {\n                      setGame(initGame());\n                      player1.agent.agent.newEpisode();\n                      player2.agent.agent.newEpisode();\n                      setBestAction(null);\n                      setEvaluateBoard(map(range(0, 9), () => null));\n                    }}\n                  >\n                    Reset Game\n                  </button>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row\n        justify=\"center\"\n        align=\"stretch\"\n        gutter={[16, 16]}\n        style={{ marginTop: \"16px\" }}\n      >\n        <Col>\n          <Card title=\"TRAINING\" style={{ width: 360 }}>\n            <Row justify=\"center\" align=\"middle\" gutter={[8, 8]}>\n              <Col>Episodes</Col>\n              <Col>\n                <div>\n                  <InputNumber\n                    value={episode}\n                    type=\"number\"\n                    onChange={(e) => setEpisode(e)}\n                  />\n                </div>\n              </Col>\n              <Col>\n                <div>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => training()}\n                    disabled={isTraining}\n                  >\n                    Simulate\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n\n            <Row gutter={[16, 16]}>\n              <Col>\n                <Table\n                  columns={[\n                    { title: \"#\", dataIndex: \"index\", key: \"index\" },\n                    { title: \"X Win\", dataIndex: \"X\", key: \"X\" },\n                    { title: \"O Win\", dataIndex: \"O\", key: \"O\" },\n                    { title: \"Draw\", dataIndex: \"draw\", key: \"draw\" },\n                    { title: \"Total\", dataIndex: \"total\", key: \"total\" },\n                  ]}\n                  dataSource={map(trainingResults, (it, index) => ({\n                    ...it,\n                    index,\n                  }))}\n                  pagination={{\n                    pageSize: 3,\n                    hideOnSinglePage: true,\n                    showLessItems: true,\n                  }}\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        <Col>\n          <Card title=\"EVALUATE\" style={{ width: 360 }}>\n            <Row justify=\"center\" align=\"middle\" gutter={[8, 8]}>\n              <Col>Episodes</Col>\n              <Col>\n                <div>\n                  <InputNumber\n                    value={evaluateEpisode}\n                    type=\"number\"\n                    onChange={(e) => setEvaluateEpisode(e)}\n                  />\n                </div>\n              </Col>\n              <Col>\n                <div>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => evaluateAgent()}\n                  >\n                    Evaluate\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n\n            <Row gutter={[16, 16]}>\n              <Col>\n                <Table\n                  columns={[\n                    { title: \"#\", dataIndex: \"index\", key: \"index\" },\n                    { title: \"X Win\", dataIndex: \"X\", key: \"X\" },\n                    { title: \"O Win\", dataIndex: \"O\", key: \"O\" },\n                    { title: \"Draw\", dataIndex: \"draw\", key: \"draw\" },\n                    { title: \"Total\", dataIndex: \"total\", key: \"total\" },\n                  ]}\n                  dataSource={map(evaluateResults, (it, index) => ({\n                    ...it,\n                    index,\n                  }))}\n                  pagination={{\n                    pageSize: 3,\n                    hideOnSinglePage: true,\n                    showLessItems: true,\n                  }}\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}